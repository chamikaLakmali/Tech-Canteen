/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import UI.User.MyCart;
import CommonTasks.AddToCart;
import HybernetSession.HybernetSessionFctory;
import Pojos.Meals;
import CommonTasks.AddItemToBuyList;
import UI.User.AddOrders;
import UI.User.ViewBuyingList;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.Iterator;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author Chamika
 */
public class MealDescription extends javax.swing.JFrame {
    String path,mprice;
    
    int mealId;
    int fdprice;
    ImageIcon Mimg;
    int id,MealID;
    byte[] imageData;
    int p;
    String mStat="";

    public MealDescription(int mealId) {
        
        initComponents();
        if(Login.userType.equals("admin")){
            cartIcon.setVisible(false);
            buyListIcon.setVisible(false);
        }
        else if(Login.userType.equals("user")){
            cartIcon.setVisible(true);
            buyListIcon.setVisible(false);
        }
        this.mealId = mealId;
        order.setVisible(false);
        addToCart.setVisible(false);
        addToBuyList.setVisible(false);
        fillData();    
    }
    public MealDescription(int mealId, String mStat) {
        
        initComponents();
        if(Login.userType.equals("admin")){
            cartIcon.setVisible(false);
        }
        else if(Login.userType.equals("user")){
            cartIcon.setVisible(true);
        }
        this.mealId = mealId;
        this.mStat = mStat;
        order.setVisible(false);
        addToCart.setVisible(false);
        addToBuyList.setVisible(false);
        fillData();    
    }

    /**
     * Creates new form UpdateMeals
     */
    public MealDescription() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        mealName = new javax.swing.JTextField();
        back = new javax.swing.JLabel();
        lbl2 = new javax.swing.JLabel();
        lbl4 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        lbl5 = new javax.swing.JLabel();
        lbl6 = new javax.swing.JLabel();
        mealType = new javax.swing.JComboBox<>();
        error = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        mealImage = new javax.swing.JLabel();
        imageUpload = new javax.swing.JButton();
        availability = new javax.swing.JComboBox<>();
        addToCart = new javax.swing.JButton();
        order = new javax.swing.JButton();
        addToBuyList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        close = new javax.swing.JLabel();
        logout = new javax.swing.JLabel();
        cartIcon = new javax.swing.JLabel();
        buyListIcon = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        img = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl1.setText("Meal Name");
        jPanel2.add(lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 150, 30));

        mealName.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        jPanel2.add(mealName, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 320, -1));

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back_icon.png"))); // NOI18N
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backMouseEntered(evt);
            }
        });
        jPanel2.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 50, 50));

        lbl2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl2.setText("Description");
        jPanel2.add(lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 140, 20));

        lbl4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl4.setText("Price");
        jPanel2.add(lbl4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 140, -1));

        price.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        jPanel2.add(price, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, 320, -1));

        lbl5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl5.setText("Type");
        jPanel2.add(lbl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 170, 20));

        lbl6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl6.setText("Availability                ");
        jPanel2.add(lbl6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 180, -1));

        mealType.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        mealType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Breakfast, Lunch Or Dinner", "Breakfast", "Lunch", "Dinner" }));
        jPanel2.add(mealType, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 320, -1));

        error.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        error.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(error, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, 450, 30));

        Update.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Update.setText("Update");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel2.add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 440, 150, -1));

        mealImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(mealImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 120, 160, 160));

        imageUpload.setText("Image Upload");
        imageUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageUploadMouseClicked(evt);
            }
        });
        imageUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageUploadActionPerformed(evt);
            }
        });
        jPanel2.add(imageUpload, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 120, 30));

        availability.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        availability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Available or Not Available", "Available", "Not Available" }));
        jPanel2.add(availability, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 320, -1));

        addToCart.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        addToCart.setText("Add to Cart");
        addToCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToCartMouseClicked(evt);
            }
        });
        addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartActionPerformed(evt);
            }
        });
        jPanel2.add(addToCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 170, -1));

        order.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        order.setText("Order");
        order.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderMouseClicked(evt);
            }
        });
        order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderActionPerformed(evt);
            }
        });
        jPanel2.add(order, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 440, 170, -1));

        addToBuyList.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        addToBuyList.setText("Add To Buy List");
        addToBuyList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToBuyListMouseClicked(evt);
            }
        });
        jPanel2.add(addToBuyList, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 440, -1, -1));

        description.setColumns(20);
        description.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        description.setRows(5);
        jScrollPane1.setViewportView(description);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 320, 100));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/closeicon.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logout.png"))); // NOI18N
        logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutMouseClicked(evt);
            }
        });

        cartIcon.setBackground(new java.awt.Color(255, 204, 204));
        cartIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crt (2).png"))); // NOI18N
        cartIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartIconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cartIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cartIconMouseExited(evt);
            }
        });

        buyListIcon.setBackground(new java.awt.Color(255, 204, 204));
        buyListIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buy.png"))); // NOI18N
        buyListIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buyListIconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buyListIconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buyListIconMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 809, Short.MAX_VALUE)
                .addComponent(buyListIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cartIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(close, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cartIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buyListIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 30));

        title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        title.setText("Update Meals");
        jPanel2.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 480, -1));

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mealsbackground.jpg"))); // NOI18N
        jPanel2.add(img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        if (mStat.equals("mc")){
            MyCart c=new MyCart();
            c.setVisible(true);
            this.dispose();   
        }
        else{
            ViewMeals view=new ViewMeals();
            view.setVisible(true);
            this.dispose();   
        }
    }//GEN-LAST:event_backMouseClicked

    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked
        
        Session session=HybernetSessionFctory.getSessionFactory().openSession();
        Transaction t=session.beginTransaction();
        
        String sql="FROM Meals";
        Query query=session.createQuery(sql);
        java.util.List <Meals>mealsList=query.list();
        
        for (Iterator<Meals> mealsIterator=mealsList.iterator();mealsIterator.hasNext();){
            Meals meal=mealsIterator.next();                       
            if (meal.getId()== mealId){
                if (mealName.getText().equals("") ||  price.getText().equals("") || mealType.getSelectedItem().equals("Select Breakfast, Lunch Or Dinner") || availability.getSelectedItem().equals("Select Available or Not Available")){
                    error.setText("Please fill all the fields..");
                }

                else{
                    error.setText("");
                    String priceRegex = "\\d+";
                    if (Pattern.compile(priceRegex).matcher(price.getText()).matches()) { 
                        error.setText("");
                        String cost=price.getText();
                        int p=Integer.parseInt(cost);
                        

                        if (mealImage.getIcon()!=null && (path != null)){
                            
                            byte[] imageData = null;
                            try {
                                BufferedImage bImage = ImageIO.read(new File(path));
                                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                                ImageIO.write(bImage, "jpg", bos);
                                imageData = bos.toByteArray();
                                meal.setPicture(imageData);
                            }
                            catch(Exception e){
                                System.out.println("Error occured :   "+e);
                            }

                        }
                        else if (mealImage.getIcon()==null){
                            meal.setPicture(null);                   
                        }

                        meal.setFoodName(mealName.getText());
                        meal.setDescription(description.getText());
                        meal.setType(mealType.getSelectedItem().toString());
                        meal.setPrice(p);
                        meal.setAvailability(availability.getSelectedItem().toString());

                        session.save(meal);
                        session.getTransaction().commit();
                        JOptionPane.showMessageDialog(null, "Details updated successfully", "Successful", JOptionPane.INFORMATION_MESSAGE);
                        ViewMeals mealList=new ViewMeals();
                        mealList.setVisible(true);
                        this.dispose();
                    }
            
            
                    else{
                        error.setText("You cannot enter letters to the price column..");
                    }
            
                }
                
            }
        }
    }//GEN-LAST:event_UpdateMouseClicked

    public void setDefaultValues(){
        mealName.setText("");
        description.setText("");
        price.setText("");
        mealType.setSelectedIndex(0);
        availability.setSelectedIndex(0);
        mealImage.setIcon(null);
    }
     
    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateActionPerformed

    private void imageUploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageUploadMouseClicked
        mealImage.setIcon(null);
        JFileChooser filechooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.IMAGE", "jpg", "jpeg", "gif", "png");
        filechooser.addChoosableFileFilter(filter);
        int x = filechooser.showOpenDialog(null);
        if (x == JFileChooser.APPROVE_OPTION) {
            File avatarIcon = filechooser.getSelectedFile();
            String path = avatarIcon.getAbsolutePath();
            this.path = path;
            mealImage.setIcon(CommonTasks.ImageResize.resize(path, mealImage.getHeight(), mealImage.getWidth()));
        } else {
            mealImage.setIcon(null);
            mealImage.setBackground(Color.white);
            System.out.println("cancelled by user");
        }
        mealImage.setVisible(true);
    }//GEN-LAST:event_imageUploadMouseClicked

    private void imageUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageUploadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageUploadActionPerformed

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        this.dispose();
    }//GEN-LAST:event_closeMouseClicked

    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutMouseClicked
        Login log=new Login();
        log.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutMouseClicked

    private void backMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseEntered
        
    }//GEN-LAST:event_backMouseEntered

    private void orderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderMouseClicked
        if (availability.getSelectedIndex()==2){
            JOptionPane.showMessageDialog(null, "Sorry, This item or quantity you ordered is not available ", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (availability.getSelectedIndex()==1){
            
            JFrame frame=new JFrame();

            String in=JOptionPane.showInputDialog(frame,"Enter the amount you need (Enter in numbers): ");
            if(in!=null){
                                            
                int amnt=Integer.parseInt(in);
                AddOrders addOrders=new AddOrders(MealID, amnt, Float.parseFloat(price.getText())* amnt, Float.parseFloat(price.getText()),"m","m");
                addOrders.setVisible(true);
                this.dispose();

            } 
        }
        
        
    }//GEN-LAST:event_orderMouseClicked

    private void orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderActionPerformed

    private void addToCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToCartMouseClicked
        JFrame frame=new JFrame();
        String in=JOptionPane.showInputDialog(frame,"Enter the amount you need (Enter in numbers): ");
        if (in!=null){
            int amnt=Integer.parseInt(in);
            AddToCart.addToCart(mealId,amnt,"m");

            MyCart cart=new MyCart();
            cart.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_addToCartMouseClicked

    private void addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addToCartActionPerformed

    private void cartIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartIconMouseClicked
        MyCart myCart=new MyCart();
        myCart.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cartIconMouseClicked

    private void cartIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartIconMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_cartIconMouseEntered

    private void cartIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartIconMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_cartIconMouseExited

    private void buyListIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buyListIconMouseClicked
        ViewBuyingList viewBuyingList=new ViewBuyingList();
        viewBuyingList.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_buyListIconMouseClicked

    private void buyListIconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buyListIconMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_buyListIconMouseEntered

    private void buyListIconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buyListIconMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_buyListIconMouseExited

    private void addToBuyListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToBuyListMouseClicked
         if (availability.getSelectedIndex()==2){
            JOptionPane.showMessageDialog(null, "Sorry, This item or quantity you ordered is not available ", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (availability.getSelectedIndex()==1){
            
            JFrame frame=new JFrame();

            String in=JOptionPane.showInputDialog(frame,"Enter the amount you need (Enter in numbers): ");
            if(in!=null){
                                            
                int amnt=Integer.parseInt(in);
                AddItemToBuyList addItemToBuyList=new AddItemToBuyList();
                addItemToBuyList.addToBuyList(MealID,Float.parseFloat(price.getText()), amnt, "m");
                ViewBuyingList bList=new ViewBuyingList();
                bList.setVisible(true);
                this.dispose();

            } 
        }
    }//GEN-LAST:event_addToBuyListMouseClicked

   
    //resize blob image
    
    public void fillData(){
        
        if (mStat.equals("m")){

            title.setText("Meal Description");
            
        }
        
        if(mStat.equals("mc")){
            //addCart.setVisible(false);
        }
        if (Login.userType.equals("user")){
            if(mStat.equals("mc")){
                title.setText("Meal Description");
                order.setVisible(false);
                addToCart.setVisible(false);
                addToBuyList.setVisible(false);
            }
            else{
                order.setVisible(true);
                addToCart.setVisible(true);
                addToBuyList.setVisible(true);
            }
            
            Update.setVisible(false);
            imageUpload.setVisible(false);
            mealName.setEditable(false);
            description.setEditable(false);
            price.setEditable(false);
            mealType.setEnabled(false);
            availability.setEnabled(false);
            
        }
        
        Session session=HybernetSessionFctory.getSessionFactory().openSession();
        Transaction t=session.beginTransaction();
        
        String sql="FROM Meals";
        Query query=session.createQuery(sql);
        java.util.List <Meals>mealsList=query.list();
        
        for (Iterator<Meals> mealsIterator=mealsList.iterator();mealsIterator.hasNext();){
           
            Meals meal=mealsIterator.next();
            fdprice=meal.getPrice();
            mprice=String.valueOf(fdprice);
            
            if (meal.getId()== mealId){
                 
                mealName.setText(meal.getFoodName());
                description.setText(meal.getDescription());               
                price.setText(mprice);
                mealType.setSelectedItem(meal.getType());
                availability.setSelectedItem(meal.getAvailability());
                if(meal.getPicture()!=null){
                    
                    try {
                        ByteArrayInputStream bis = new ByteArrayInputStream(meal.getPicture());
                        BufferedImage buffrdImage = ImageIO.read(bis);
                        Mimg = new ImageIcon(buffrdImage);
                        mealImage.setIcon(CommonTasks.ImageResize.resizeImg(Mimg));

                    } catch (Exception e) {
                        System.out.println("error occured.."+e);
                    }
                }
            }
        }
      
    }
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MealDescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MealDescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MealDescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MealDescription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MealDescription().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Update;
    private javax.swing.JButton addToBuyList;
    private javax.swing.JButton addToCart;
    private javax.swing.JComboBox<String> availability;
    private javax.swing.JLabel back;
    private javax.swing.JLabel buyListIcon;
    private javax.swing.JLabel cartIcon;
    private javax.swing.JLabel close;
    private javax.swing.JTextArea description;
    private javax.swing.JLabel error;
    private javax.swing.JButton imageUpload;
    private javax.swing.JLabel img;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lbl6;
    private javax.swing.JLabel logout;
    private javax.swing.JLabel mealImage;
    private javax.swing.JTextField mealName;
    private javax.swing.JComboBox<String> mealType;
    private javax.swing.JButton order;
    private javax.swing.JTextField price;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
